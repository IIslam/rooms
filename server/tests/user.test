process.env.NODE_ENV = 'test';

const fs = require('fs')
const app = require("../app")
const chai = require('chai')
const chaiHTTP = require('chai-http')
const testVars = require('./testvars.json')
const should = chai.should()
const expect = chai.expect

chai.use(chaiHTTP)

describe('User Test', function () {
  
  it('Should delete user account with the correct token', (done) => {
    chai.request(app)
      .delete(`/api/user/${testVars.user.id}`)
      .set("authorization", testVars.meta.token)
      .end((err, res) => {
        res.should.have.status(200)
        expect(res.body.message).to.equal('You have deleted your account.')
        done()
      })
  })

  it('Should register a new user with correct info', (done) => {
    chai.request(app)
      .post('/api/user/register')
      .send({
        email: 'imustafa97@outlook.com',
        password: '159753123Aa',
        password_confirmation: '159753123Aa'
      })
      .end((err, res) => {
        res.should.have.status(200)
        done()
      })
  })

  it('Should not register a user with an already existing email', (done) => {
    chai.request(app)
      .post('/api/user/register')
      .send({
        email: 'imustafa97@outlook.com',
        password: '159753123Aa',
        password_confirmation: '159753123Aa'
      })
      .end((err, res) => {
        res.should.have.status(403)
        expect(res.body.message).to.equal('Mail exists')
        done()
      })
  })

  it('Should not register a user with invalid password confirmation', (done) => {
    chai.request(app)
      .post('/api/user/register')
      .send({
        email: 'new@test.com',
        password: '159753123Aa',
        password_confirmation: '159753123AaA'
      })
      .end((err, res) => {
        res.should.have.status(422)
        done()
      })
  })

  it('Should login a user with the correct credentials', (done) => {
    chai.request(app)
      .post('/api/user/login')
      .send({
        email: 'imustafa97@outlook.com',
        password: '159753123Aa'
      })
      .end((err, res) => {
        res.should.have.status(200)
        expect(res.body.user.email).to.equal('imustafa97@outlook.com')
        fs.writeFile("./testvars.json", JSON.stringify(res.body), err => err ? console.log(err) : done())
      })
  })

  it('Should not login a user with invalid credentials', (done) => {
    chai.request(app)
      .post('/api/user/login')
      .send({
        email: 'imustafa97@outlook.com',
        password: '159753123AaA'
      })
      .end((err, res) => {
        res.should.have.status(401)
        expect(res.body.message).to.equal('Invalid Credentials.')
        done()
      })
  })

  it('Should get logged in user data with the correct token', (done) => {
    chai.request(app)
      .get('/api/user/')
      .set("authorization", testVars.meta.token)
      .end((err, res) => {
        res.should.have.status(200)
        expect(res.body.data.email).to.equal(testVars.user.email)
        done()
      })
  })
})